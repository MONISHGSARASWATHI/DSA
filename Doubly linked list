#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node*prev;
    struct node*next;
};

typedef struct node NODE;
NODE *head=NULL;
NODE *tail=NULL;

 void insertatbegin(int val)
 {
    NODE* newnode=(NODE*)malloc(sizeof(NODE));
    newnode->data=val;
    newnode->prev=NULL;
    newnode->next=NULL;
    if(head==NULL)
    {
        head=newnode;
        tail=newnode;
    }
    else
    {
        head->prev=newnode;
        newnode->next=head;
        head=newnode;
    }
 }

 void insertatend(int val)
 {
    NODE* newnode=(NODE*)malloc(sizeof(NODE));
    newnode->data=val;
    newnode->prev=NULL;
    newnode->next=NULL;
    if(head==NULL)
    {
        head=newnode;
        tail=newnode;
    }
    else
    {
        tail->next=newnode;
        newnode->prev=tail;
        tail=newnode;
    }
 }
 void insertatsort(int val)
 {
     NODE* tptr;
    NODE* newnode=(NODE*)malloc(sizeof(NODE));
    newnode->data=val;
    newnode->prev=NULL;
    newnode->next=NULL;
    if(head==NULL)
    {
        head=newnode;
        tail=newnode;
    }
    else
    {
         for(tptr=head;tptr!=NULL;tptr=tptr->next)
        {
            if(tptr->data>newnode->data)
                break;
        }
        if(tptr==head)
        {
            head->prev=newnode;
            newnode->next=head;
            head=newnode;
        }
        else if(tptr==NULL)
        {
            tail->next=newnode;
            newnode->prev=tail;
            tail=newnode;
        }
        else
        {
            tptr->prev->next=newnode;
            newnode->prev=tptr->prev;
            newnode->next=tptr;
            tptr->prev=newnode;
        }
    }
 }

 void display()
 {
  NODE* tptr;
  if(head==NULL)
    printf("The list is empty");
  else
    {
         printf("The elements are:");
        for(tptr=head;tptr!=NULL;tptr=tptr->next)
            printf("%d ",tptr->data);
    }
  printf("\n");
 }

  void displayrev()
 {
  NODE* tptr;
  if(tail==NULL)
    printf("the list is empty");
  else
    {
        printf("The elements are:");
        for(tptr=tail;tptr!=NULL;tptr=tptr->prev)
            printf("%d ",tptr->data);
    }
  printf("\n");
 }

 void search(val)
 {
   NODE* tptr;
   if(head==NULL)
    printf("The list is empty\n");
   else
   {
       for(tptr=head;tptr!=NULL;tptr=tptr->next)
        if(tptr->data==val)
       {
           printf("The element is found\n");
           break;
       }
       if(tptr==NULL)
        printf("The element is not found\n");
   }
 }
 void delete(int val)
 {
     NODE* tptr;
    for(tptr=head;tptr!=NULL;tptr=tptr->next)
       if(tptr->data==val)
        break;
    if(tptr==NULL)
        printf("The element is not found\n");
    else if(tptr==head)
    {
        head->next->prev=NULL;
        head=head->next;
        free(tptr);
    }
    else if(tptr==tail)
    {
     tail->prev->next=NULL;
     tail=tail->prev;
     free(tptr);
    }
    else
    {
        tptr->prev->next=tptr->next;
        tptr->next->prev=tptr->prev;
        free(tptr);
    }
 }

int main()
{
 int choice,val;
    while(1)
    {
        printf("-------------------------------\n");
        printf("1.Insert value at beginning \n");
        printf("2.Insert value at end \n");
        printf("3.Insert value at sorted list\n");
        printf("4.Display \n");
        printf("5.Display in reverse \n");
        printf("6.Search the element\n");
        printf("7.To delete the element\n");
        printf("8.Exit\n");
        printf("-------------------------------\n");
        printf("Enter the choice:");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:
                {
                    printf("Enter the value to insert:");
                    scanf("%d",&val);
                    insertatbegin(val);
                    break;
                }
            case 2:
                {
                    printf("Enter the value to insert:");
                    scanf("%d",&val);
                    insertatend(val);
                    break;
                }
            case 3:
                {
                    printf("Enter the value to insert:");
                    scanf("%d",&val);
                    insertatsort(val);
                    break;
                }
            case 4:
                {
                    display();
                    break;
                }
            case 5:
                {
                    displayrev();
                    break;
                }
            case 6:
                {
                    printf("Enter the value for search:");
                    scanf("%d",&val);
                    search(val);
                    break;
                }
            case 7:
                {
                    printf("Enter the value to delete:");
                    scanf("%d",&val);
                    if(head==NULL)
                        printf("The list is empty\n");
                    else
                    {
                        delete(val);
                        display();
                    }
                    break;
                }
            case 8:
                exit(0);break;
            default: printf("Enter the valid choice:");
        }
    }
}
